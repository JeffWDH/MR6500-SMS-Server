#!/usr/bin/perl
use strict;
use warnings;
use IO::Socket::INET;

# --- Configuration ---

# Automatically get the LAN GW and listen only on that IP
my $listen_ip = `/usr/bin/dx router.GwIpAddr`;
chomp $listen_ip;

# TCP port to listen to
my $listen_port = 767; # SMS

# Password required to send messages
my $password = 'password';

# Timeout for SMS sending operation (seconds)
my $sms_timeout = 5;

# --- Utility Subroutines ---

# URL decode a string
sub url_decode {
    my ($str) = @_;
    $str =~ s/\+/ /g;
    $str =~ s/%([A-Fa-f\d]{2})/chr hex $1/eg;
    return $str;
}

# Print HTTP response
sub print_http_response {
    my ($client, $status, $content_type, $body) = @_;
    print $client "HTTP/1.0 $status\n";
    print $client "Content-Type: $content_type\n\n";
    print $client $body;
}

# Print HTML form
sub print_html_form {
    my ($client) = @_;
    my $html = <<'END_HTML';
<!DOCTYPE html>
<html>
  <body>
    <h2>SMS Server</h2>
    <form action="/action" method="get">
      <p>Password: <input type="password" id="password" name="password" maxlength="64"></p>
      <p>Phone Number: <input type="text" id="phone_number" name="phone_number" maxlength="20" value="+12223334567"></p>
      Message:<br>
      <textarea id="message" name="message" rows="4" cols="50" maxlength="160"></textarea><br>
      <p><input type="checkbox" id="debug_mode" name="debug_mode" value="1"> <label for="debug_mode">Debug Mode</label></p>
      <input type="submit" value="Submit">
    </form>
    <p>Note: Message length is limited to 160 characters. Emoji is not supported.</p>
  </body>
</html>
END_HTML
    print_http_response($client, '200 OK', 'text/html', $html);
}

# --- Main Server Setup ---

my $server = IO::Socket::INET->new(
    LocalHost => $listen_ip,
    LocalPort => $listen_port,
    Proto     => 'tcp',
    Listen    => 5,
    Reuse     => 1
) or die "Error: Cannot create socket - $!\n";

$SIG{INT} = sub { $server->close(); exit 0; };

# --- Main Loop ---

while (my $client = $server->accept()) {
    $client->autoflush(1);
    my $request = <$client>;

    # --- Route Requests ---
    if ($request =~ m|^GET / HTTP/1\.[01]|) {
        print_html_form($client);
    } elsif ($request =~ m|^GET /action(.+) HTTP/1\.[01]|) {
        handle_action_request($client, $request);
    } else {
        print_http_response($client, '400 BAD REQUEST', 'text/plain', "Status: Error - Bad request.\n");
    }
    close $client;
}

# --- Action Handler ---

sub handle_action_request {
    my ($client, $request) = @_;
    print $client "HTTP/1.0 200 OK\n";
    print $client "Content-Type: text/plain\n\n";

    # Extract parameters from GET request
    my (
        $password_arg
      , $phone_number_arg
      , $message_arg
      , $debug_mode_arg
    ) = (
        ($request =~ /password=([^&\s]*)/),
        ($request =~ /phone_number=([^&\s]*)/),
        ($request =~ /message=([^&\s]*)/),
        ($request =~ /debug_mode=([^&\s]*)/)
    );

    # URL decode inputs
    $password_arg     = url_decode($password_arg // '');
    $phone_number_arg = url_decode($phone_number_arg // '');
    $message_arg      = url_decode($message_arg // '');
    $debug_mode_arg   = url_decode($debug_mode_arg // '');

    # Use debug mode from form, fallback to global if not set
    my $debug = ($debug_mode_arg eq '1') ? 1 : 0;

    # Validate password
    if ($password_arg ne $password) {
        print $client "Status: Error - Access denied.\n";
        return;
    }

    # Validate phone number (starts with +, then 7-20 digits)
    unless ($phone_number_arg =~ /^\+\d{7,20}$/) {
        print $client "Status: Error - Invalid phone number. Must start with + and contain 7-20 digits.\n";
        return;
    }

    # Validate message length
    if (length($message_arg) > 160) {
        print $client "Status: Error - Message is longer than 160 characters.\n";
        return;
    }

    # --- Begin SMS sending block ---
    my $fh;
    my $timed_out = 0;
    local $SIG{ALRM} = sub { $timed_out = 1; die "timeout\n" };
    eval {
        alarm($sms_timeout);
        unless (open($fh, '+<', '/dev/smd8')) {
            print $client "Status: Error - Unable to open /dev/smd8.\n";
            alarm(0);
            return;
        }
        $fh->autoflush(1);
        print $fh "\r";
        print $fh "AT+CMGF=1\r";
        sleep(0.1);
        print $fh "AT+CMGS=\"$phone_number_arg\"\r";
        sleep(0.1);
        print $fh "$message_arg";
        sleep(0.1);
        print $fh "\x1a";

        if ($debug) {
            print $client "Debug log:\n";
        }

        while (my $response = <$fh>) {
            print $client $response if $debug;
            if ($response =~ /\+CMGS: /) {
                print $client "Status: Message sent.\n";
                last;
            }
            if ($response =~ /ERROR/) {
                print $client "Status: Error sending message: $response\n";
                last;
            }
        }
        close $fh;
        alarm(0);
    };
    if ($@) {
        close $fh if $fh;
        if ($timed_out) {
            print $client "Status: Error - Operation timed out (SIM may not be ready).\n";
        } else {
            print $client "Status: Error - $@\n";
        }
    }
    # --- End SMS sending block ---
}
